{
  "files.insertFinalNewline": true,
  "dart.flutterSdkPath": ".fvm/versions/3.27.0",
  "search.exclude": {
    "**/.fvm": true
  },
  "files.watcherExclude": {
    "**/.fvm": true
  },
  "folderTemplates.structures": [
    {
      "name": "VPD Architecture screen",
      "structure": [
        {
          "fileName": "<FTName>_dependencies.dart",
          "template": "VPD dependencies"
        },
        {
          "fileName": "<FTName>_router.dart",
          "template": "VPD router"
        },
        {
          "fileName": "<FTName>_screen.dart",
          "template": "VPD screen"
        },
        {
          "fileName": "<FTName>_presenter.dart",
          "template": "VPD Presenter"
        },
        {
          "fileName": "<FTName>_store.dart",
          "template": "VPD DataStore"
        },
        {
          "fileName": "index.dart",
          "template": "VPD index"
        }
      ]
    }
  ],
  "folderTemplates.fileTemplates": {
    "VPD dependencies": [
      "class <FTName | pascalcase>Dependencies {",
      "  const <FTName | pascalcase>Dependencies();",
      "}",
      ""
    ],
    "VPD router": [
      "import 'package:go_router/go_router.dart';",
      "import 'index.dart';",
      "",
      "final class <FTName | pascalcase>Router {",
      "  static const String routePath = '/<FTName>';",
      "  static const String routeName = '<FTName>';",
      "",
      "  static GoRoute get route => GoRoute(",
      "        path: routePath,",
      "        name: routeName,",
      "        pageBuilder: (context, state) => const NoTransitionPage(",
      "          child: <FTName | pascalcase>Screen(dependencies: <FTName | pascalcase>Dependencies()),",
      "        ),",
      "      );",
      "}",
      "",
      "extension <FTName | pascalcase>RouterX on GoRouter {",
      "  void go<FTName | pascalcase>() => goNamed(<FTName | pascalcase>Router.routeName);",
      "}",
      ""
    ],
    "VPD screen": [
      "import 'package:flutter/material.dart';",
      "import 'package:core_ui/core_ui.dart';",
      "",
      "import '<FTName>_dependencies.dart';",
      "import '<FTName>_presenter.dart';",
      "import '<FTName>_store.dart';",
      "",
      "class <FTName | pascalcase>Screen extends StatefulWidget {",
      "  final <FTName | pascalcase>Dependencies dependencies;",
      "  const <FTName | pascalcase>Screen({super.key, required this.dependencies});",
      "  @override",
      "  _<FTName | pascalcase>ScreenState createState() => _<FTName | pascalcase>ScreenState();",
      "}",
      "",
      "class _<FTName | pascalcase>ScreenState extends VPDScreenState<<FTName | pascalcase>Screen, <FTName | pascalcase>Presenter> {",
      "  <FTName | pascalcase>Store get dataStore => presenter.dataStore;",
      "",
      "  @override",
      "  void initState() {",
      "    presenter = <FTName | pascalcase>Presenter(widget.dependencies);",
      "    super.initState();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    super.build(context);",
      "    // TODO: implement build",
      "    throw UnimplementedError();",
      "  }",
      "}",
      ""
    ],
    "VPD Presenter": [
      "import 'package:core_ui/core_ui.dart';",
      "",
      "import '<FTName>_dependencies.dart';",
      "import '<FTName>_store.dart';",
      "",
      "class <FTName | pascalcase>Presenter extends VPDPresenter<<FTName | pascalcase>Store> {",
      "  <FTName | pascalcase>Presenter(<FTName | pascalcase>Dependencies dependencies) ",
      "      : super(dataStore: <FTName | pascalcase>Store(dependencies));",
      "}",
      ""
    ],
    "VPD DataStore": [
      "import 'package:core_ui/core_ui.dart';",
      "",
      "import '<FTName>_dependencies.dart';",
      "",
      "part '<FTName>_store.g.dart';",
      "",
      "class <FTName | pascalcase>Store = _<FTName | pascalcase>Store with _$<FTName | pascalcase>Store;",
      "",
      "abstract class _<FTName | pascalcase>Store extends VPDDataStore with Store {",
      "  final <FTName | pascalcase>Dependencies dependencies;",
      "  const _<FTName | pascalcase>Store(this.dependencies);",
      "}",
      ""
    ],
    "VPD index": [
      "export '<FTName>_dependencies.dart';",
      "export '<FTName>_router.dart';",
      "export '<FTName>_screen.dart';"
    ]
  }
}
